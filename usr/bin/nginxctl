#!/usr/bin/env python3
"""high-level nginx control utility."""

from os import path
import argparse
import functools
import inspect
import netifaces
import os
import socket
import subprocess
import sys
import textwrap
import time

from typing import List

HTDOCS = '/var/www'
HTPASSWD = '/etc/nginx/htpasswd'
SITES_AVAILABLE = '/etc/nginx/sites-available'
SITES_ENABLED = '/etc/nginx/sites-enabled'

COMMANDS = []


def command(func):
    COMMANDS.append(func)
    return func


class MustBeRootException(Exception):
    """you should be root, but you're not :("""
    pass


def must_be_root(func):
    @functools.wraps(func)
    def check_root_first(*args, **kwargs):
        if os.geteuid() != 0:
            raise MustBeRootException()
        func(*args, **kwargs)
    return check_root_first


def print_sorted(xs: List[str]):
    for x in sorted(xs):
        print(x)


def manual(action: str):
    print(action)
    while input('done? [y/n] ') != 'y':
        pass
    print()


def ip_addrs() -> List[str]:
    def flatten(xss): return (x for xs in xss for x in xs)

    def conns(links, kind): return flatten(
        link[kind] for link in links if kind in link)

    def addrs(conns): return [conn['addr'] for conn in conns]
    links = [netifaces.ifaddresses(link) for link in netifaces.interfaces()]

    ipv4 = addrs(conns(links, netifaces.AF_INET))
    ipv6 = addrs(conns(links, netifaces.AF_INET6))

    return ipv4 + [ip.split('%')[0] for ip in ipv6]

# types.


def Site(value: str) -> str:
    if not path.isfile(path.join(SITES_AVAILABLE, value)):
        raise argparse.ArgumentTypeError(f'unknown site: {value}')
    return value


def User(value: str) -> str:
    if not value.isalpha():
        raise argparse.ArgumentTypeError(f'users can only be latin characters: {value}')
    return value


# commands.

@command
def list_available_sites():
    """list available sites."""
    print_sorted(os.listdir(SITES_AVAILABLE))


@command
def list_enabled_sites():
    """list enabled sites."""
    print_sorted(os.listdir(SITES_ENABLED))


@command
@must_be_root
def reload_config():
    """check config safety && reload nginx."""
    subprocess.run(['nginx', '-t'], check=True)
    subprocess.run(['systemctl', 'reload', 'nginx'], check=True)


@command
@must_be_root
def enable_site(site: Site):
    """enable a site."""
    if not path.isfile(path.join(SITES_ENABLED, site)):
        os.symlink(path.join(SITES_AVAILABLE, site),
                   path.join(SITES_ENABLED, site))
    reload_config()


@command
@must_be_root
def disable_site(site: Site):
    """disable a site."""
    if path.isfile(path.join(SITES_ENABLED, site)):
        os.remove(path.join(SITES_ENABLED, site))
    reload_config()


@command
@must_be_root
def list_users(site: Site):
    """list users with access to a site."""
    with open(path.join(HTPASSWD, site)) as f:
        lines = f.readlines()
        users = [l.split(':')[0]
                 for l in lines if not l.startswith('#')]
    print_sorted(users)


@command
@must_be_root
def add_user(site: Site, user: User):
    """add a user to a site."""
    if path.isfile(path.join(HTPASSWD, site)):
        with open(path.join(HTPASSWD, site)) as f:
            lines = f.readlines()
            if any(l.startswith(f'{user}:') for l in lines):
                raise ValueError(f'user already exists: {user}')

    while True:
        cmd = subprocess.run(
            ['openssl', 'passwd', '-apr1'], capture_output=True)
        if cmd.returncode == 0:
            password = cmd.stdout.decode('utf-8').strip()
            break

    with open(path.join(HTPASSWD, site), 'a') as f:
        print(f'{user}:{password}', file=f)


@command
@must_be_root
def remove_user(site: Site, user: User):
    """remove a user from a site."""
    if not path.isfile(path.join(HTPASSWD, site)):
        return

    with open(path.join(HTPASSWD, site)) as f:
        lines = [l.strip() for l in f.readlines()]

    with open(path.join(HTPASSWD, site), 'w') as f:
        for line in lines:
            if not line.startswith(f'{user}:'):
                print(line, file=f)


@command
@must_be_root
def create(site: str):

    my_ip_addrs = ip_addrs()
    print(f'waiting for DNS for {site}... ', end='')
    remote_ip = socket.gethostbyname(site)
    if remote_ip in my_ip_addrs:
        print('done.')
    else:
        print(f'points at {remote_ip}, not me.')
        manual(f'go to Gandi.net, create A and AAAA records for {site}')
        while True:
            try:
                print(f'waiting for DNS for {site}... ', end='')
                remote_ip = socket.gethostbyname(site)
                if remote_ip in my_ip_addrs:
                    print('done.')
                    break
                print('retry in 10s')
                time.sleep(10)
            except socket.gaierror:
                print('retry in 10s.')
                time.sleep(10)
        print()

    if not path.isdir(path.join(HTDOCS, site)):
        os.mkdir(path.join(HTDOCS, site))

    with open(path.join(SITES_AVAILABLE, site), 'w') as f:
        print(textwrap.dedent(f'''
        server {{
            server_name {site};
            include snippets/server.http-static.conf;
        }}
        ''').strip(), file=f)

    enable_site(site)

    subprocess.run(['certbot', 'certonly', '-a', 'webroot', f'--webroot-path=/var/www/{site}', '-d', site, '-d', site], check=True)

    with open(path.join(SITES_AVAILABLE, site), 'w') as f:
        print(textwrap.dedent(f'''
        server {{
                server_name {site};
                include snippets/server.http-to-https.conf;
        }}
        server {{
                server_name {site};
                include snippets/server.https-static.conf;
                ssl_certificate /etc/letsencrypt/live/{site}/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/{site}/privkey.pem;
        }}
        ''').strip(), file=f)

    enable_site(site)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)
    subs = parser.add_subparsers()

    for func in COMMANDS:
        name = func.__name__.replace('_', '-')
        help = inspect.getdoc(func)

        cmd = subs.add_parser(name, help=help, description=help)
        cmd.set_defaults(func=func)

        signature = inspect.signature(func)
        for parameter in signature.parameters.values():
            if parameter.default == inspect.Parameter.empty:
                if parameter.annotation == bool:
                    cmd.add_argument(parameter.name, action='store_true')
                else:
                    cmd.add_argument(parameter.name, type=parameter.annotation)
            else:
                if parameter.annotation == bool:
                    action = 'store_false' if parameter.default else 'store_true'
                    cmd.add_argument('--' + parameter.name, action=action)
                else:
                    cmd.add_argument(
                        '--' + parameter.name, type=parameter.annotation, default=parameter.default)

    args = parser.parse_args()

    if 'func' not in args:
        parser.print_help()
    else:
        try:
            args.func(*[vars(args)[p]
                        for p in inspect.signature(args.func).parameters])
        except MustBeRootException:
            print('must be root')
            sys.exit(1)
        except KeyboardInterrupt:
            print()
